name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
      - development
      - feature/CD
  pull_request:
    branches:
      - main
      - development
      - feature/CD

jobs:
  build:
    name: Build and Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore TenantConstants.cs Locally
        run: echo "${{ secrets._TENANT_CONSTANTS_CS }}" | base64 --decode > backend/Shared/Authorization/TenantConstants.cs

      - name: Debug Directory Structure
        run: ls -R backend

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore Dependencies
        run: dotnet restore backend/Aspire/Aspire.sln

      - name: Build Application
        run: dotnet build backend/Aspire/Aspire.sln --no-restore --configuration Release

      - name: Run Tests for All Modules in Parallel and Summarize
        run: |
          mkdir -p test-results
          find backend/Api/Module -type f -name "*.Test.csproj" | \
            xargs -I {} sh -c 'echo "Running tests for project: {}"; dotnet test "{}" --no-build --configuration Release --collect:"XPlat Code Coverage" --logger trx | tee "test-results/$(basename {}).log" || true'
          echo "### Listing All Test Log Files ###"
          ls -l test-results
          echo "### Individual Test Summaries ###"
          for file in test-results/*.log; do
            echo "Summary for $(basename "$file"):"
            grep -E "(Passed!|Total:)" "$file" || echo "No summary found in $file"
            echo "------"
          done
          echo "### Final Aggregated Test Summary ###"
          grep -H -E "(Passed!|Total:)" test-results/*.log || echo "No test summary lines found."

  publish:
    name: Publish Application
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore TenantConstants.cs Locally
        run: echo "${{ secrets._TENANT_CONSTANTS_CS }}" | base64 --decode > backend/Shared/Authorization/TenantConstants.cs

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore Dependencies
        run: dotnet restore backend/Aspire/Aspire.sln

      - name: Build and Publish
        run: dotnet publish backend/Api/Server/Server.csproj -c Release -o backend/Api/Server/publish

      - name: Upload Published Application
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: backend/Api/Server/publish/

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: publish

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy appsettings.json to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Deploy appsettings.json
            echo "${{ secrets._APPSETTINGS }}" | base64 --decode > /root/Learnathon/earendel/backend/Api/Server/appsettings.json
            chmod 644 /root/Learnathon/earendel/backend/Api/Server/appsettings.json

      - name: Deploy TenantConstants.cs to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Deploy TenantConstants.cs
            echo "${{ secrets._TENANT_CONSTANTS_CS }}" | base64 --decode > /root/Learnathon/earendel/backend/Shared/Authorization/TenantConstants.cs
            chmod 644 /root/Learnathon/earendel/backend/Shared/Authorization/TenantConstants.cs

      - name: Deploy Application via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /root/Learnathon/earendel
            echo "Switching to main branch and pulling latest changes..."
            git checkout main
            git pull origin main
            echo "Switching to migrations branch and pulling latest changes..."
            git checkout migrations
            git pull origin migrations
            echo "Backing up migration files..."
            mkdir -p /tmp/migration-backup
            cp -r Migrations/* /tmp/migration-backup/
            echo "Switching back to main branch..."
            git checkout main
            echo "Updating migrations folder in backend..."
            cp -r /tmp/migration-backup/* backend/Api/Migrations/PGSql/
            rm -rf /tmp/migration-backup
            echo "Building and restarting Docker containers..."
            cd backend
            docker-compose down
            docker-compose up --build -d
