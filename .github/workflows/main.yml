name: .NET CI/CD Workflow

on:
  push:
    branches:
      - main
      - development
      - feature/code-coverage
  pull_request:
    branches:
      - main
      - development
      - feature/code-coverage

jobs:
  build:
    name: Build, Test, and Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore TenantConstants.cs
        run: echo "${{ secrets._TENANT_CONSTANTS_CS }}" | base64 --decode > backend/Shared/Authorization/TenantConstants.cs

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore Dependencies
        run: dotnet restore backend/Aspire/Aspire.sln

      - name: Build Application
        run: dotnet build backend/Aspire/Aspire.sln --no-restore --configuration Release

      - name: Run Tests with Coverage
        run: |
          mkdir -p test-results coverage
          find backend/Api/Module -type f -name "*.Test.csproj" | \
            xargs -I {} sh -c 'echo "Running tests for project: {}"; dotnet test "{}" --no-build --configuration Release \
            --collect:"XPlat Code Coverage" --logger trx --results-directory test-results || true'

      - name: Convert Coverage to Cobertura Format
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          reportgenerator -reports:test-results/*/coverage.cobertura.xml \
            -targetdir:coverage -reporttypes:Cobertura

      - name: Upload Test Results & Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
      
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      # Optional: Upload to SonarCloud
      - name: SonarCloud Analysis
        if: ${{ secrets.SONARCLOUD_TOKEN != '' }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"YourProjectKey" /o:"YourOrgName" \
            /d:sonar.token="${{ secrets.SONARCLOUD_TOKEN }}" \
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage/coverage.cobertura.xml"
          dotnet build backend/Aspire/Aspire.sln
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONARCLOUD_TOKEN }}"

      # Optional: Upload to Codecov
      - name: Upload Coverage to Codecov
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        run: |
          bash <(curl -s https://codecov.io/bash) -f "coverage/coverage.cobertura.xml"
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish:
    name: Publish Application
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore TenantConstants.cs
        run: echo "${{ secrets._TENANT_CONSTANTS_CS }}" | base64 --decode > backend/Shared/Authorization/TenantConstants.cs

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore Dependencies
        run: dotnet restore backend/Aspire/Aspire.sln

      - name: Build and Publish
        run: dotnet publish backend/Api/Server/Server.csproj -c Release -o backend/Api/Server/publish

      - name: Upload Published Application
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: backend/Api/Server/publish/
